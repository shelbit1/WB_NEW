import { getStorageData, StorageItem } from './storage-utils';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–æ–≤–∞—Ä–∞–º–∏
export interface ProductCard {
  nmID: number;
  vendorCode: string;
  object?: string;
  subjectName?: string;
  brand?: string;
  createdAt?: string;
  updatedAt?: string;
  sizes?: ProductSize[];
}

export interface ProductSize {
  techSize?: string;
  wbSize?: string;
  price?: number;
  skus?: string[];
}

export interface CostPriceData {
  nmID: number;
  vendorCode: string;
  object: string;
  brand: string;
  sizeName: string;
  barcode: string;
  price: number;
  costPrice: number;
  createdAt: string;
  updatedAt: string;
  source?: string;
}

// –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å DetailReportItem –∏–∑ route.ts
export interface RealizationItem {
  nm_id?: number;
  sa_name?: string;
  barcode?: string;
  retail_price_withdisc_rub?: number;
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ Content API WB —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
 */
async function getProductCards(token: string, maxPages: number = 10): Promise<ProductCard[]> {
  if (!token || typeof token !== 'string' || token.trim().length === 0) {
    console.error('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è API –∫–∞—Ä—Ç–æ—á–µ–∫');
    return [];
  }

  try {
    console.log('üí∞ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ Content API');
    
    const allCards: ProductCard[] = [];
    let currentPage = 0;
    let hasMore = true;
    let lastCursor: string | undefined;

    while (hasMore && currentPage < maxPages) {
      const requestBody = {
        settings: {
          cursor: {
            limit: 100,
            ...(lastCursor && { updatedAt: lastCursor })
          },
          filter: {
            withPhoto: -1
          }
        }
      };

      console.log(`üìÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${currentPage + 1}/${maxPages}...`);

      const response = await fetch('https://content-api.wildberries.ru/content/v2/get/cards/list', {
        method: 'POST',
        headers: {
          'Authorization': token,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(requestBody),
        signal: AbortSignal.timeout(30000) // 30 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
      });

      if (response.ok) {
        const data = await response.json();
        
        if (data.cards && Array.isArray(data.cards)) {
          // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫
          const validCards = data.cards.filter((card: unknown) => {
            if (!card || typeof card !== 'object') return false;
            const cardObj = card as Record<string, unknown>;
            return (cardObj.nmID || cardObj.vendorCode) && 
                   !isNaN(parseInt(cardObj.nmID as string));
          });
          
          allCards.push(...validCards);
          
          if (validCards.length !== data.cards.length) {
            console.warn(`‚ö†Ô∏è –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ ${data.cards.length - validCards.length} –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${currentPage + 1}`);
          }

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ –¥–∞–Ω–Ω—ã–µ
          if (data.cards.length < 100) {
            hasMore = false;
          } else {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º cursor –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            lastCursor = data.cursor?.updatedAt;
            if (!lastCursor) {
              hasMore = false;
            }
          }
        } else {
          console.warn('‚ö†Ô∏è API –∫–∞—Ä—Ç–æ—á–µ–∫ –Ω–µ –≤–µ—Ä–Ω—É–ª –æ–∂–∏–¥–∞–µ–º—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö');
          hasMore = false;
        }
      } else {
        const errorText = await response.text().catch(() => '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
        console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ API –∫–æ–Ω—Ç–µ–Ω—Ç–∞: ${response.status} - ${errorText}`);
        
        if (response.status === 401) {
          throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –∏—Å—Ç–µ–∫—à–∏–π —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
        } else if (response.status === 429) {
          console.warn('‚ö†Ô∏è –õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—Ä–µ–≤—ã—à–µ–Ω, –∂–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã...');
          await new Promise(resolve => setTimeout(resolve, 2000));
          continue; // –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É –¥–ª—è —Ç–æ–π –∂–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        } else {
          hasMore = false;
        }
      }

      currentPage++;
      
      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è rate limits
      if (hasMore && currentPage < maxPages) {
        await new Promise(resolve => setTimeout(resolve, 500));
      }
    }

    console.log(`üì¶ –ò—Ç–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫ –∏–∑ API –∫–æ–Ω—Ç–µ–Ω—Ç–∞: ${allCards.length} (–∑–∞–≥—Ä—É–∂–µ–Ω–æ ${currentPage} —Å—Ç—Ä–∞–Ω–∏—Ü)`);
    return allCards;

  } catch (error) {
    if (error instanceof Error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–µ–∫ –∏–∑ API –∫–æ–Ω—Ç–µ–Ω—Ç–∞: ${error.message}`);
      throw error;
    } else {
      console.error('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–µ–∫ –∏–∑ API –∫–æ–Ω—Ç–µ–Ω—Ç–∞:', error);
      return [];
    }
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–æ–≤
 */
export async function getCostPriceData(
  token: string, 
  savedCostPrices: {[key: string]: string} = {}, 
  realizationData: RealizationItem[] = []
): Promise<CostPriceData[]> {
  // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  if (!token || typeof token !== 'string' || token.trim().length === 0) {
    throw new Error('–¢–æ–∫–µ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω');
  }

  if (!Array.isArray(realizationData)) {
    console.warn('‚ö†Ô∏è realizationData –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤');
    realizationData = [];
  }

  if (typeof savedCostPrices !== 'object' || savedCostPrices === null) {
    console.warn('‚ö†Ô∏è savedCostPrices –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç');
    savedCostPrices = {};
  }

  try {
    console.log('üí∞ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–æ–≤');
    console.log(`üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Ü–µ–Ω: ${Object.keys(savedCostPrices).length}, –∑–∞–ø–∏—Å–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏: ${realizationData.length}`);
    
    const costPriceData: CostPriceData[] = [];
    
    // –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ API –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    let cards: ProductCard[] = [];
    try {
      cards = await getProductCards(token);
    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–µ–∫:', error);
      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É —Å –ø—É—Å—Ç—ã–º –º–∞—Å—Å–∏–≤–æ–º –∫–∞—Ä—Ç–æ—á–µ–∫
      cards = [];
    }

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    let storageData: StorageItem[] = [];
    try {
      const today = new Date().toISOString().split('T')[0];
      storageData = await getStorageData(token, today, today);
      console.log(`üì¶ –ü–æ–ª—É—á–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö —Ö—Ä–∞–Ω–µ–Ω–∏—è: ${storageData.length} –∑–∞–ø–∏—Å–µ–π`);
    } catch (error) {
      console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
    }

    // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Ö—Ä–∞–Ω–µ–Ω–∏—è
    const subjectMap = new Map<string, string>();
    storageData.forEach((item: StorageItem) => {
      const nmId = item.nmId?.toString() || '';
      const vendorCode = item.vendorCode || '';
      const subject = item.subject || '';
      
      if (subject && nmId) {
        subjectMap.set(nmId, subject);
      }
      if (subject && vendorCode) {
        subjectMap.set(vendorCode, subject);
      }
    });

    // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
    const cardsMap = new Map<string, ProductCard>();
    cards.forEach((card: ProductCard) => {
      cardsMap.set(card.nmID?.toString() || '', card);
      cardsMap.set(card.vendorCode || '', card);
    });

    // –®–∞–≥ 2: –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ –¥–∞–Ω–Ω—ã–µ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ)
    console.log(`üìä –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ ${cards.length} –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ –¥–∞–Ω–Ω—ã–µ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏...`);
    
    // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –≤—ã–¥–µ–ª—è–µ–º –º–∞—Å—Å–∏–≤ —Å –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º
    const estimatedSize = cards.reduce((sum, card) => {
      if (!card.sizes) return sum + 1;
      return sum + card.sizes.reduce((sizeSum, size) => 
        sizeSum + (size.skus?.length || 1), 0);
    }, 0);
    
    console.log(`üìä –û–∂–∏–¥–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: ~${estimatedSize}`);
    
    cards.forEach((card: ProductCard, cardIndex: number) => {
      // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤
      if (cardIndex % 1000 === 0 && cardIndex > 0) {
        console.log(`üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${cardIndex}/${cards.length} –∫–∞—Ä—Ç–æ—á–µ–∫`);
      }

      const nmId = card.nmID?.toString() || '';
      const vendorCode = card.vendorCode || '';
      
      // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ (–∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω–æ)
      const subject = card.object || card.subjectName || 
                     subjectMap.get(nmId) || subjectMap.get(vendorCode) || '';
      
      const baseProduct = {
        nmID: card.nmID,
        vendorCode: card.vendorCode,
        object: subject,
        brand: card.brand || '',
        createdAt: card.createdAt || '',
        updatedAt: card.updatedAt || ''
      };

      if (card.sizes && card.sizes.length > 0) {
        // –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ —Å–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é –∑–∞–ø–∏—Å—å
        card.sizes.forEach((size: ProductSize) => {
          if (size.skus && size.skus.length > 0) {
            // –î–ª—è –∫–∞–∂–¥–æ–≥–æ SKU –≤ —Ä–∞–∑–º–µ—Ä–µ —Å–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É
            size.skus.forEach((sku: string) => {
              const productKey = `${card.nmID}-${sku}`;
              const savedCostPrice = savedCostPrices[productKey] ? parseFloat(savedCostPrices[productKey]) : 0;
              
              costPriceData.push({
                ...baseProduct,
                sizeName: size.techSize || size.wbSize || '–ë–µ–∑ —Ä–∞–∑–º–µ—Ä–∞',
                barcode: sku,
                price: size.price || 0,
                costPrice: savedCostPrice // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å
              });
            });
          } else {
            // –ï—Å–ª–∏ –Ω–µ—Ç SKU, –≤—Å–µ —Ä–∞–≤–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä
            const productKey = `${card.nmID}-`;
            const savedCostPrice = savedCostPrices[productKey] ? parseFloat(savedCostPrices[productKey]) : 0;
            
            costPriceData.push({
              ...baseProduct,
              sizeName: size.techSize || size.wbSize || '–ë–µ–∑ —Ä–∞–∑–º–µ—Ä–∞',
              barcode: '',
              price: size.price || 0,
              costPrice: savedCostPrice
            });
          }
        });
      } else {
        // –ï—Å–ª–∏ –Ω–µ—Ç —Ä–∞–∑–º–µ—Ä–æ–≤, –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –±–µ–∑ —Ä–∞–∑–º–µ—Ä–∞
        const productKey = `${card.nmID}-`;
        const savedCostPrice = savedCostPrices[productKey] ? parseFloat(savedCostPrices[productKey]) : 0;
        
        costPriceData.push({
          ...baseProduct,
          sizeName: '–ë–µ–∑ —Ä–∞–∑–º–µ—Ä–∞',
          barcode: '',
          price: 0,
          costPrice: savedCostPrice
        });
      }
    });

    // –®–∞–≥ 3: –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –∫–∞—Ä—Ç–æ—á–∫–∞—Ö (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ)
    console.log('üì¶ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏, –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤ –∫–∞—Ä—Ç–æ—á–∫–∞—Ö...');
    
    // –°–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
    const existingProducts = new Set<string>();
    const costPriceIndex = new Map<string, CostPriceData>();
    
    // –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–æ–≤–∞—Ä—ã
    costPriceData.forEach(item => {
      const key1 = `${item.nmID}-${item.barcode}`;
      const key2 = `${item.vendorCode}-${item.barcode}`;
      existingProducts.add(key1);
      existingProducts.add(key2);
      costPriceIndex.set(key1, item);
      costPriceIndex.set(key2, item);
    });

    const missingProducts = new Map<string, CostPriceData>();
    const batchSize = 1000; // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á–∞–º–∏ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏
    
    console.log(`üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ ${realizationData.length} –∑–∞–ø–∏—Å–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞—Ç—á–∞–º–∏ –ø–æ ${batchSize}...`);
    
    for (let i = 0; i < realizationData.length; i += batchSize) {
      const batch = realizationData.slice(i, i + batchSize);
      
      batch.forEach((item: RealizationItem, index: number) => {
        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤
        if ((i + index) % 5000 === 0 && (i + index) > 0) {
          console.log(`üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${i + index}/${realizationData.length} –∑–∞–ø–∏—Å–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏`);
        }

        const nmId = item.nm_id?.toString() || '';
        const vendorCode = item.sa_name || '';
        const barcode = item.barcode || '';
        
        if (!vendorCode) return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–≤–∞—Ä—ã –±–µ–∑ –∞—Ä—Ç–∏–∫—É–ª–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞
        
        const productKey1 = `${nmId}-${barcode}`;
        const productKey2 = `${vendorCode}-${barcode}`;
        
        // –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç —Å—Ä–µ–¥–∏ –∫–∞—Ä—Ç–æ—á–µ–∫, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
        if (!existingProducts.has(productKey1) && !existingProducts.has(productKey2)) {
          const uniqueKey = vendorCode; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Ä—Ç–∏–∫—É–ª –ø—Ä–æ–¥–∞–≤—Ü–∞ –∫–∞–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á
          
          if (!missingProducts.has(uniqueKey)) {
            const costKey = `${nmId}-${barcode}`;
            const savedCostPrice = savedCostPrices[costKey] ? parseFloat(savedCostPrices[costKey]) : 0;
            
            // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç –∏–∑ –∫–∞—Ä—Ç—ã —Å—É–±—ä–µ–∫—Ç–æ–≤ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞—Ä—Ç–∏–∫—É–ª –∫–∞–∫ fallback
            const subject = subjectMap.get(nmId) || subjectMap.get(vendorCode) || vendorCode;
            
            missingProducts.set(uniqueKey, {
              nmID: parseInt(nmId) || 0,
              vendorCode: vendorCode,
              object: subject,
              brand: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±—Ä–µ–Ω–¥',
              sizeName: '–†–∞–∑–º–µ—Ä –Ω–µ —É–∫–∞–∑–∞–Ω',
              barcode: barcode,
              price: item.retail_price_withdisc_rub || 0,
              costPrice: savedCostPrice,
              createdAt: '',
              updatedAt: '',
              source: 'realization' // –ü–æ–º–µ—á–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö
            });
          }
        }
      });
      
      // –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏
      if (i + batchSize < realizationData.length) {
        await new Promise(resolve => setTimeout(resolve, 10));
      }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç–æ–≤–∞—Ä—ã –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ
    console.log(`üì¶ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ ${missingProducts.size} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤...`);
    costPriceData.push(...Array.from(missingProducts.values()));

    console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫ –∏–∑ API: ${cards.length}`);
    console.log(`üì¶ –î–æ–±–∞–≤–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏: ${missingProducts.size}`);
    console.log(`üìä –ò—Ç–æ–≥–æ –ø–æ–∑–∏—Ü–∏–π –≤ –ª–∏—Å—Ç–µ "–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤": ${costPriceData.length}`);
    
    return costPriceData;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏:', error);
    return [];
  }
}

/**
 * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è Excel
 */
export function transformCostPriceToExcel(costPriceData: CostPriceData[]) {
  return costPriceData.map((item) => ({
    "–ê—Ä—Ç–∏–∫—É–ª –í–ë": item.nmID || "",
    "–ê—Ä—Ç–∏–∫—É–ª –ø—Ä–æ–¥–∞–≤—Ü–∞": item.vendorCode || "",
    "–ü—Ä–µ–¥–º–µ—Ç": item.object || "",
    "–ë—Ä–µ–Ω–¥": item.brand || "",
    "–†–∞–∑–º–µ—Ä": item.sizeName || "",
    "–®—Ç—Ä–∏—Ö–∫–æ–¥": item.barcode || "",
    "–¶–µ–Ω–∞": item.price || 0,
    "–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å": item.costPrice || 0,
    "–ú–∞—Ä–∂–∞": item.costPrice > 0 ? (item.price - item.costPrice) : 0,
    "–†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å (%)": item.costPrice > 0 && item.price > 0 ? 
      ((item.price - item.costPrice) / item.price * 100).toFixed(2) : 0,
    "–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö": item.source === 'realization' ? '–ò–∑ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏' : '–ò–∑ –∫–∞—Ä—Ç–æ—á–µ–∫ API',
    "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è": item.createdAt || "",
    "–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è": item.updatedAt || ""
  }));
}

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 */
export async function loadSavedCostPrices(tokenId: string): Promise<{ [key: string]: string }> {
  if (!tokenId || typeof tokenId !== 'string' || tokenId.trim().length === 0) {
    console.error('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π tokenId –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏');
    return {};
  }

  try {
    const CostPrice = (await import('./models/CostPrice')).default;
    const connectToDatabase = (await import('./mongodb')).default;
    
    await connectToDatabase();
    
    const costPricesFromDB = await CostPrice.find({ tokenId }).lean();
    
    const savedCostPrices: { [key: string]: string } = {};
    let validCount = 0;
    
    costPricesFromDB.forEach((item) => {
      if (item && item.productKey && typeof item.costPrice === 'number' && !isNaN(item.costPrice)) {
        savedCostPrices[item.productKey] = item.costPrice.toString();
        validCount++;
      } else {
        console.warn(`‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏:`, item);
      }
    });
    
    console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${validCount} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–µ–π –¥–ª—è —Ç–æ–∫–µ–Ω–∞ ${tokenId}`);
    
    if (validCount !== costPricesFromDB.length) {
      console.warn(`‚ö†Ô∏è –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ ${costPricesFromDB.length - validCount} –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏`);
    }
    
    return savedCostPrices;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–µ–π:', error);
    return {};
  }
}

/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
 */
export async function saveCostPrices(tokenId: string, costPrices: { [key: string]: string }): Promise<number> {
  if (!tokenId || typeof tokenId !== 'string' || tokenId.trim().length === 0) {
    console.error('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π tokenId –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏');
    return 0;
  }

  if (!costPrices || typeof costPrices !== 'object' || Array.isArray(costPrices)) {
    console.error('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
    return 0;
  }

  const entries = Object.entries(costPrices);
  if (entries.length === 0) {
    console.warn('‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
    return 0;
  }

  try {
    const CostPrice = (await import('./models/CostPrice')).default;
    const connectToDatabase = (await import('./mongodb')).default;
    
    await connectToDatabase();
    
    let savedCount = 0;
    let skippedCount = 0;
    
    console.log(`üíæ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ${entries.length} –∑–∞–ø–∏—Å–µ–π —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏`);
    
    for (const [productKey, costPriceValue] of entries) {
      // –í–∞–ª–∏–¥–∞—Ü–∏—è productKey
      if (!productKey || typeof productKey !== 'string' || !productKey.includes('-')) {
        console.warn(`‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π productKey: ${productKey}`);
        skippedCount++;
        continue;
      }

      // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ü–µ–Ω—ã
      const costPrice = parseFloat(costPriceValue);
      if (isNaN(costPrice) || costPrice < 0) {
        console.warn(`‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è ${productKey}: ${costPriceValue}`);
        skippedCount++;
        continue;
      }

      // –ò–∑–≤–ª–µ–∫–∞–µ–º nmID –∏ barcode –∏–∑ productKey (—Ñ–æ—Ä–º–∞—Ç: nmID-barcode)
      const parts = productKey.split('-');
      if (parts.length < 2) {
        console.warn(`‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç productKey: ${productKey}`);
        skippedCount++;
        continue;
      }

      const nmIDStr = parts[0];
      const barcode = parts.slice(1).join('-'); // –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –≤ barcode –µ—Å—Ç—å –¥–µ—Ñ–∏—Å—ã
      const nmID = parseInt(nmIDStr);

      if (isNaN(nmID) || nmID <= 0) {
        console.warn(`‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π nmID –≤ productKey: ${productKey}`);
        skippedCount++;
        continue;
      }

      try {
        await CostPrice.findOneAndUpdate(
          { tokenId, productKey },
          {
            tokenId,
            productKey,
            nmID,
            barcode: barcode || '',
            costPrice,
            updatedBy: 'system'
          },
          { 
            upsert: true, 
            new: true,
            runValidators: true
          }
        );
        
        savedCount++;
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–ª—è ${productKey}:`, error);
        skippedCount++;
      }
    }

    console.log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${savedCount}, –ø—Ä–æ–ø—É—â–µ–Ω–æ ${skippedCount} –∑–∞–ø–∏—Å–µ–π`);
    return savedCount;
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏:', error);
    return 0;
  }
} 