// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ WB API
export interface StorageItem {
  date?: string;                    // –î–∞—Ç–∞
  logWarehouseCoef?: number;        // –õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–∫–ª–∞–¥–∞
  officeId?: number;                // ID –æ—Ñ–∏—Å–∞
  warehouse?: string;               // –ù–∞–∑–≤–∞–Ω–∏–µ —Å–∫–ª–∞–¥–∞
  warehouseCoef?: number;           // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–∫–ª–∞–¥–∞
  giId?: number;                    // ID –ø–æ—Å—Ç–∞–≤–∫–∏
  chrtId?: number;                  // ID —Ä–∞–∑–º–µ—Ä–∞ —Ç–æ–≤–∞—Ä–∞ –≤ WB
  size?: string;                    // –†–∞–∑–º–µ—Ä —Ç–æ–≤–∞—Ä–∞
  barcode?: string;                 // –®—Ç—Ä–∏—Ö–∫–æ–¥
  subject?: string;                 // –ü—Ä–µ–¥–º–µ—Ç
  brand?: string;                   // –ë—Ä–µ–Ω–¥
  vendorCode?: string;              // –ê—Ä—Ç–∏–∫—É–ª –ø—Ä–æ–¥–∞–≤—Ü–∞
  nmId?: number;                    // –ê—Ä—Ç–∏–∫—É–ª WB
  volume?: number;                  // –û–±—ä–µ–º —Ç–æ–≤–∞—Ä–∞
  calcType?: string;                // –¢–∏–ø —Ä–∞—Å—á–µ—Ç–∞
  warehousePrice?: number;          // –°—Ç–æ–∏–º–æ—Å—Ç—å —Ö—Ä–∞–Ω–µ–Ω–∏—è
  barcodesCount?: number;           // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à—Ç—Ä–∏—Ö–∫–æ–¥–æ–≤
  palletPlaceCode?: number;         // –ö–æ–¥ –º–µ—Å—Ç–∞ –Ω–∞ –ø–∞–ª–ª–µ—Ç–µ
  palletCount?: number;             // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–ª–ª–µ—Ç
  originalDate?: string;            // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞
  loyaltyDiscount?: number;         // –°–∫–∏–¥–∫–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
  tariffFixDate?: string;           // –î–∞—Ç–∞ —Ñ–∏–∫—Å–∞—Ü–∏–∏ —Ç–∞—Ä–∏—Ñ–∞
  tariffLowerDate?: string;         // –î–∞—Ç–∞ —Å–Ω–∏–∂–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞
}

/**
 * –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å API –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏
 * @param token - API —Ç–æ–∫–µ–Ω Wildberries
 * @param startDate - –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
 * @param endDate - –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
 * @returns –ú–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö –æ –ø–ª–∞—Ç–Ω–æ–º —Ö—Ä–∞–Ω–µ–Ω–∏–∏
 */
export async function getStorageData(token: string, startDate: string, endDate: string): Promise<StorageItem[]> {
  try {
    console.log(`üîç –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö —Ö—Ä–∞–Ω–µ–Ω–∏—è: ${startDate} - ${endDate}`);
    
    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–∏–æ–¥–∞ (–º–∞–∫—Å–∏–º—É–º 8 –¥–Ω–µ–π)
    const start = new Date(startDate);
    const end = new Date(endDate);
    const diffDays = Math.ceil(Math.abs(end.getTime() - start.getTime()) / (1000 * 60 * 60 * 24));
    
    if (diffDays > 8) {
      console.warn(`‚ö†Ô∏è –ü–µ—Ä–∏–æ–¥ ${diffDays} –¥–Ω–µ–π –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç 8 –¥–Ω–µ–π –¥–ª—è API —Ö—Ä–∞–Ω–µ–Ω–∏—è`);
      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥ –¥–æ 8 –¥–Ω–µ–π
      const limitedEndDate = new Date(start.getTime() + 7 * 24 * 60 * 60 * 1000);
      const limitedEnd = limitedEndDate.toISOString().split('T')[0];
      console.log(`üìÖ –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥ –¥–æ: ${startDate} - ${limitedEnd}`);
      return await getStorageData(token, startDate, limitedEnd);
    }
    
    // 2. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
    console.log("üì§ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –æ—Ç—á–µ—Ç–∞ –ø–æ —Ö—Ä–∞–Ω–µ–Ω–∏—é...");
    const taskUrl = `https://seller-analytics-api.wildberries.ru/api/v1/paid_storage?dateFrom=${startDate}&dateTo=${endDate}`;
    console.log(`üì° URL —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: ${taskUrl}`);
    
    const taskResponse = await fetch(taskUrl, { 
      method: "GET", 
      headers: { 
        "Authorization": token,
        "Content-Type": "application/json"
      } 
    });

    console.log(`üìä –û—Ç–≤–µ—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è: ${taskResponse.status} ${taskResponse.statusText}`);

    // 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
    if (!taskResponse.ok) {
      const errorText = await taskResponse.text();
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è taskId –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è: ${taskResponse.status}`, errorText);
      
      if (taskResponse.status === 429) {
        console.warn("‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ (1 –∑–∞–ø—Ä–æ—Å –≤ –º–∏–Ω—É—Ç—É)");
        console.log("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 2 –º–∏–Ω—É—Ç—ã –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...");
        // –ñ–¥–µ–º 2 –º–∏–Ω—É—Ç—ã –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞
        await new Promise(resolve => setTimeout(resolve, 120000));
        // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞
        return await getStorageData(token, startDate, endDate);
      } else if (taskResponse.status === 401) {
        throw new Error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏");
      }
      throw new Error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: ${taskResponse.status}`);
    }
    
    // 4. –ü–æ–ª—É—á–µ–Ω–∏–µ taskId
    const taskData = await taskResponse.json();
    console.log("üìã –û—Ç–≤–µ—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏:", JSON.stringify(taskData, null, 2));
    
    const taskId = taskData?.data?.taskId;
    if (!taskId) {
      console.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å taskId –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞:", taskData);
      throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å taskId");
    }
    
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω taskId –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è: ${taskId}`);

    // 5. –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –æ—Ç—á–µ—Ç–∞
    console.log("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –æ —Ö—Ä–∞–Ω–µ–Ω–∏–∏...");
    const maxStatusChecks = 12; // 12 –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø–æ 5 —Å–µ–∫—É–Ω–¥ = 1 –º–∏–Ω—É—Ç–∞
    
    for (let i = 0; i < maxStatusChecks; i++) {
      await new Promise(resolve => setTimeout(resolve, 5000));
      console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ ${i + 1}/${maxStatusChecks}...`);
      
      const statusResponse = await fetch(`https://seller-analytics-api.wildberries.ru/api/v1/paid_storage/tasks/${taskId}/status`, {
        method: "GET",
        headers: { 
          "Authorization": token,
          "Content-Type": "application/json"
        }
      });
      
      if (statusResponse.ok) {
        const statusData = await statusResponse.json();
        console.log(`üìä –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏: ${statusData?.data?.status}`);
        
        if (statusData?.data?.status === "done") {
          console.log("‚úÖ –û—Ç—á–µ—Ç –≥–æ—Ç–æ–≤! –ó–∞–≥—Ä—É–∂–∞–µ–º...");
          break;
        }
      } else {
        console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: ${statusResponse.status}`);
      }
    }
    
    // 6. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
    const maxRetries = 5;
    for (let retryCount = 0; retryCount < maxRetries; retryCount++) {
      console.log(`üì• –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç—á–µ—Ç–∞ ${retryCount + 1}/${maxRetries}...`);
      
      const downloadResponse = await fetch(`https://seller-analytics-api.wildberries.ru/api/v1/paid_storage/tasks/${taskId}/download`, {
        method: "GET",
        headers: { 
          "Authorization": token,
          "Content-Type": "application/json"
        }
      });

      console.log(`üìä –û—Ç–≤–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è: ${downloadResponse.status} ${downloadResponse.statusText}`);
      
      if (downloadResponse.ok) {
        const responseText = await downloadResponse.text();
        console.log(`üìÑ –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è (–¥–ª–∏–Ω–∞: ${responseText.length})`);
        
        if (!responseText || responseText.trim().length === 0) {
          console.warn("‚ö†Ô∏è API —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç");
          return [];
        }
        
        let storageData;
        try {
          storageData = JSON.parse(responseText);
        } catch (parseError) {
          console.error("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON —Ö—Ä–∞–Ω–µ–Ω–∏—è:", parseError);
          console.log("üìÑ –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏:", responseText);
          return [];
        }
        
        const dataArray = Array.isArray(storageData) ? storageData : [];
        console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${dataArray.length} –∑–∞–ø–∏—Å–µ–π –æ —Ö—Ä–∞–Ω–µ–Ω–∏–∏`);
        
        if (dataArray.length > 0) {
          console.log("üîç –ü–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å —Ö—Ä–∞–Ω–µ–Ω–∏—è:", JSON.stringify(dataArray[0], null, 2));
          console.log("üè∑Ô∏è –ü–æ–ª—è –∑–∞–ø–∏—Å–∏:", Object.keys(dataArray[0] || {}));
        } else {
          console.warn("‚ö†Ô∏è API –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö —Ö—Ä–∞–Ω–µ–Ω–∏—è");
          console.log("üìä –≠—Ç–æ –º–æ–∂–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å:");
          console.log("   - –ù–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥");
          console.log("   - –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¥–∞—Ç");
          console.log("   - –ü—Ä–æ–±–ª–µ–º—ã —Å —Ç–æ–∫–µ–Ω–æ–º –∏–ª–∏ –ø—Ä–∞–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞");
        }
        
        return dataArray;
      } else if (downloadResponse.status === 429) {
        // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: 2, 4, 8 –º–∏–Ω—É—Ç
        const delayMinutes = Math.min(2 ** retryCount, 8);
        console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ 429. –û–∂–∏–¥–∞–Ω–∏–µ ${delayMinutes} –º–∏–Ω—É—Ç...`);
        await new Promise(resolve => setTimeout(resolve, delayMinutes * 60 * 1000));
      } else {
        const errorText = await downloadResponse.text();
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç—á–µ—Ç–∞ –æ —Ö—Ä–∞–Ω–µ–Ω–∏–∏: ${downloadResponse.status}`, errorText);
        
        if (retryCount < maxRetries - 1) {
          console.log(`üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...`);
          await new Promise(resolve => setTimeout(resolve, 10000));
        }
      }
    }
    
    throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫");
  } catch (error) {
    console.error("üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Ö—Ä–∞–Ω–µ–Ω–∏–∏:", error);
    throw error;
  }
} 