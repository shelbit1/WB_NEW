// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è
export interface StorageItem {
  date?: string;
  warehouse?: string;
  nmId?: number;
  size?: string;
  barcode?: string;
  subject?: string;
  brand?: string;
  vendorCode?: string;
  volume?: number;
  calcType?: string;
  warehousePrice?: number;
  barcodesCount?: number;
  warehouseCoef?: number;
  loyaltyDiscount?: number;
  tariffFixDate?: string;
  tariffLowerDate?: string;
}

/**
 * –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å API –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏
 * @param token - API —Ç–æ–∫–µ–Ω Wildberries
 * @param startDate - –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
 * @param endDate - –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
 * @returns –ú–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö –æ –ø–ª–∞—Ç–Ω–æ–º —Ö—Ä–∞–Ω–µ–Ω–∏–∏
 */
export async function getStorageData(token: string, startDate: string, endDate: string): Promise<StorageItem[]> {
  try {
    console.log(`üîç –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö —Ö—Ä–∞–Ω–µ–Ω–∏—è: ${startDate} - ${endDate}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–∏–æ–¥ (–º–∞–∫—Å–∏–º—É–º 8 –¥–Ω–µ–π —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏)
    const start = new Date(startDate);
    const end = new Date(endDate);
    const diffTime = Math.abs(end.getTime() - start.getTime());
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    
    if (diffDays > 8) {
      console.warn(`‚ö†Ô∏è –ü–µ—Ä–∏–æ–¥ ${diffDays} –¥–Ω–µ–π –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç 8 –¥–Ω–µ–π –¥–ª—è API —Ö—Ä–∞–Ω–µ–Ω–∏—è`);
      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥ –¥–æ 8 –¥–Ω–µ–π
      const limitedEndDate = new Date(start.getTime() + 7 * 24 * 60 * 60 * 1000);
      const limitedEnd = limitedEndDate.toISOString().split('T')[0];
      console.log(`üìÖ –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥ –¥–æ: ${startDate} - ${limitedEnd}`);
      return await getStorageData(token, startDate, limitedEnd);
    }
    
    // –°–æ–∑–¥–∞–µ–º taskId –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å GET –∑–∞–ø—Ä–æ—Å–æ–º (—Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏)
    console.log("üì§ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –æ—Ç—á–µ—Ç–∞ –ø–æ —Ö—Ä–∞–Ω–µ–Ω–∏—é...");
    const taskUrl = `https://seller-analytics-api.wildberries.ru/api/v1/paid_storage?dateFrom=${startDate}&dateTo=${endDate}`;
    console.log(`üì° URL —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: ${taskUrl}`);
    
    const taskResponse = await fetch(taskUrl, {
      method: "GET",
      headers: {
        "Authorization": token,
      },
    });

    console.log(`üìä –û—Ç–≤–µ—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è: ${taskResponse.status} ${taskResponse.statusText}`);

    let taskId: string | undefined;

    if (!taskResponse.ok) {
      const errorText = await taskResponse.text();
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è taskId –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è: ${taskResponse.status}`, errorText);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏
      if (taskResponse.status === 429) {
        console.warn("‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ (1 –∑–∞–ø—Ä–æ—Å –≤ –º–∏–Ω—É—Ç—É)");
        console.log("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 2 –º–∏–Ω—É—Ç—ã –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...");
        
        // –ñ–¥–µ–º 2 –º–∏–Ω—É—Ç—ã –∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É
        await new Promise(resolve => setTimeout(resolve, 120000));
        
        console.log("üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è taskId...");
        const retryTaskResponse = await fetch(taskUrl, {
          method: "GET",
          headers: {
            "Authorization": token,
          },
        });
        
        if (retryTaskResponse.ok) {
          const retryTaskData = await retryTaskResponse.json();
          taskId = retryTaskData?.data?.taskId;
          
          if (taskId) {
            console.log(`‚úÖ –°–æ–∑–¥–∞–Ω taskId –ø–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏: ${taskId}`);
          } else {
            console.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å taskId –ø–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏");
            return [];
          }
        } else {
          console.error(`‚ùå –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è taskId –Ω–µ —É–¥–∞–ª–∞—Å—å: ${retryTaskResponse.status}`);
          return [];
        }
      } else if (taskResponse.status === 401) {
        console.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏");
        return [];
      } else {
        return [];
      }
    } else {
      const taskData = await taskResponse.json();
      console.log("üìã –û—Ç–≤–µ—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏:", JSON.stringify(taskData, null, 2));
      
      taskId = taskData?.data?.taskId;

      if (!taskId) {
        console.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å taskId –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞:", taskData);
        return [];
      }
    }

    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω taskId –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è: ${taskId}`);

    // –ñ–¥–µ–º –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Å—Ç–∞—Ç—É—Å)
    console.log("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –æ —Ö—Ä–∞–Ω–µ–Ω–∏–∏...");
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
    const maxStatusChecks = 12; // 12 –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø–æ 5 —Å–µ–∫—É–Ω–¥ = 1 –º–∏–Ω—É—Ç–∞
    let statusCheckCount = 0;
    
    while (statusCheckCount < maxStatusChecks) {
      await new Promise(resolve => setTimeout(resolve, 5000)); // –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥
      statusCheckCount++;
      
      console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ ${statusCheckCount}/${maxStatusChecks}...`);
      
      try {
        const statusResponse = await fetch(`https://seller-analytics-api.wildberries.ru/api/v1/paid_storage/tasks/${taskId}/status`, {
          method: "GET",
          headers: {
            "Authorization": token,
          },
        });
        
        if (statusResponse.ok) {
          const statusData = await statusResponse.json();
          console.log(`üìä –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏: ${statusData?.data?.status}`);
          
          if (statusData?.data?.status === "done") {
            console.log("‚úÖ –û—Ç—á–µ—Ç –≥–æ—Ç–æ–≤! –ó–∞–≥—Ä—É–∂–∞–µ–º...");
            break;
          }
        } else {
          console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: ${statusResponse.status}`);
        }
      } catch (statusError) {
        console.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞:", statusError);
      }
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ç—á–µ—Ç —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ (—É–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è 429 –æ—à–∏–±–æ–∫)
    const maxRetries = 5;
    let retryCount = 0;

    while (retryCount < maxRetries) {
      console.log(`üì• –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç—á–µ—Ç–∞ ${retryCount + 1}/${maxRetries}...`);
      
      const downloadResponse = await fetch(`https://seller-analytics-api.wildberries.ru/api/v1/paid_storage/tasks/${taskId}/download`, {
        method: "GET",
        headers: {
          "Authorization": token,
        },
      });

      console.log(`üìä –û—Ç–≤–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è: ${downloadResponse.status} ${downloadResponse.statusText}`);

      if (downloadResponse.ok) {
        const responseText = await downloadResponse.text();
        console.log(`üìÑ –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è (–¥–ª–∏–Ω–∞: ${responseText.length}):`, responseText.substring(0, 500) + "...");
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–¥ –ø–∞—Ä—Å–∏–Ω–≥–æ–º JSON
        if (!responseText || responseText.trim().length === 0) {
          console.warn("‚ö†Ô∏è API —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç");
          return [];
        }
        
        const trimmedResponse = responseText.trim();
        if (!trimmedResponse.startsWith('{') && !trimmedResponse.startsWith('[')) {
          console.warn("‚ö†Ô∏è API —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–µ—Ä–Ω—É–ª –Ω–µ-JSON –æ—Ç–≤–µ—Ç:", trimmedResponse.substring(0, 100));
          return [];
        }
        
        let storageData;
        try {
          storageData = JSON.parse(responseText);
        } catch (parseError) {
          console.error("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON —Ö—Ä–∞–Ω–µ–Ω–∏—è:", parseError);
          console.log("üìÑ –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏:", responseText);
          console.log("üìè –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞:", responseText.length);
          return [];
        }
        
        console.log("üì¶ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è:", Object.keys(storageData || {}));
        
        // –î–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        const dataArray = Array.isArray(storageData) ? storageData : [];
        
        console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${dataArray.length} –∑–∞–ø–∏—Å–µ–π –æ —Ö—Ä–∞–Ω–µ–Ω–∏–∏`);
        
        if (dataArray.length > 0) {
          console.log("üîç –ü–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å —Ö—Ä–∞–Ω–µ–Ω–∏—è:", JSON.stringify(dataArray[0], null, 2));
          console.log("üè∑Ô∏è –ü–æ–ª—è –∑–∞–ø–∏—Å–∏:", Object.keys(dataArray[0] || {}));
        }
        
        return dataArray;
      } else if (downloadResponse.status === 429) {
        // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è 429 –æ—à–∏–±–æ–∫
        const delayMinutes = Math.min(2 ** retryCount, 8); // 2, 4, 8 –º–∏–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º
        const delayMs = delayMinutes * 60 * 1000;
        
        console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ 429 –¥–ª—è taskId ${taskId}. –ü–æ–ø—ã—Ç–∫–∞ ${retryCount + 1} –∏–∑ ${maxRetries}`);
        console.log(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ ${delayMinutes} –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...`);
        
        await new Promise(resolve => setTimeout(resolve, delayMs));
        retryCount++;
      } else {
        const errorText = await downloadResponse.text();
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç—á–µ—Ç–∞ –æ —Ö—Ä–∞–Ω–µ–Ω–∏–∏: ${downloadResponse.status}`, errorText);
        retryCount++;
        
        if (retryCount < maxRetries) {
          console.log(`üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...`);
          await new Promise(resolve => setTimeout(resolve, 10000));
        }
      }
    }

    console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç—á–µ—Ç –æ —Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ—Å–ª–µ ${maxRetries} –ø–æ–ø—ã—Ç–æ–∫`);
    return [];
  } catch (error) {
    console.error("üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Ö—Ä–∞–Ω–µ–Ω–∏–∏:", error);
    return [];
  }
} 