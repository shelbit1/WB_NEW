// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
export interface FinancialData {
  advertId: number;
  date: string;
  sum: number;
  bill: number;
  type: string;
  docNumber: string;
  sku?: string;
  campName?: string;  // –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏ –∏–∑ API
}

export interface Campaign {
  advertId: number;
  name: string;
  type: string;
  status: string;
}

export interface CampaignInfo {
  advertId: number;
  name: string;
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è API –æ—Ç–≤–µ—Ç–æ–≤
interface WildberriesAdvertData {
  advertId: number;
  name?: string;
  type?: string;
  status?: string;
}

interface WildberriesCampaignsResponse {
  adverts?: WildberriesAdvertData[];
}

interface WildberriesFinanceRecord {
  advertId: number;
  updTime?: string;
  updSum?: number;
  paymentType?: string;
  type?: string;
  updNum?: string;
  campName?: string;      // –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏ –∏–∑ API
  advertType?: number;    // –¢–∏–ø —Ä–µ–∫–ª–∞–º—ã –∏–∑ API  
  advertStatus?: number;  // –°—Ç–∞—Ç—É—Å –∫–∞–º–ø–∞–Ω–∏–∏ –∏–∑ API
}





// –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–Ω–µ–π –∫ –¥–∞—Ç–µ
export function addDays(date: Date, days: number): Date {
  const result = new Date(date);
  result.setDate(result.getDate() + days);
  return result;
}

// –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã
export function formatDate(date: Date): string {
  return date.toISOString().split('T')[0];
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–π
export async function fetchCampaigns(apiKey: string): Promise<Campaign[]> {
  try {
    console.log('üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞–º–ø–∞–Ω–∏–π...');
    
    const response = await fetch('https://advert-api.wildberries.ru/adv/v1/promotion/count', {
      method: 'GET',
      headers: {
        'Authorization': apiKey,
        'Content-Type': 'application/json'
      }
    });

    if (!response.ok) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–π: ${response.status} ${response.statusText}`);
      return [];
    }

    const data = await response.json() as WildberriesCampaignsResponse;
    console.log(`üì¶ –ü–æ–ª—É—á–µ–Ω–æ ${Array.isArray(data.adverts) ? data.adverts.length : 0} –∫–∞–º–ø–∞–Ω–∏–π`);
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    const campaigns: Campaign[] = (data.adverts || []).map((advert: WildberriesAdvertData) => ({
      advertId: advert.advertId,
      name: advert.name || `–ö–∞–º–ø–∞–Ω–∏—è ${advert.advertId}`,
      type: advert.type || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
      status: advert.status || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
    }));

    console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${campaigns.length} –∫–∞–º–ø–∞–Ω–∏–π`);
    return campaigns;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞–º–ø–∞–Ω–∏–π:', error);
    return [];
  }
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è API fullstats
interface FullStatsResponse {
  views: number;
  clicks: number;
  sum: number;
  dates: string[];
  days: FullStatsDay[];
  advertId: number;
}

interface FullStatsDay {
  date: string;
  views: number;
  clicks: number;
  sum: number;
  apps: FullStatsApp[];
}

interface FullStatsApp {
  views: number;
  clicks: number;
  sum: number;
  nm: FullStatsNm[];
  appType: number;
}

interface FullStatsNm {
  views: number;
  clicks: number;
  sum: number;
  name: string;
  nmId: number;
}

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å –∞—Ä—Ç–∏–∫—É–ª–∞–º–∏ —á–µ—Ä–µ–∑ API v2/fullstats
export async function fetchCampaignFullStats(apiKey: string, campaigns: Campaign[], startDate: string, endDate: string): Promise<Map<number, string>> {
  const articlesMap = new Map<number, string>();
  
  try {
    console.log(`üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å –∞—Ä—Ç–∏–∫—É–ª–∞–º–∏ –¥–ª—è ${campaigns.length} –∫–∞–º–ø–∞–Ω–∏–π —á–µ—Ä–µ–∑ API v2/fullstats...`);
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞–º–ø–∞–Ω–∏–∏ (–ø–∞–∫–µ—Ç–∞–º–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏)
    const batchSize = 3; // –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞ —Ç–∞–∫ –∫–∞–∫ API –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç—è–∂–µ–ª—ã–º
    for (let i = 0; i < campaigns.length; i += batchSize) {
      const batch = campaigns.slice(i, i + batchSize);
      const promises = batch.map(async (campaign) => {
        try {
          console.log(`üìà –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∫–∞–º–ø–∞–Ω–∏–∏ ${campaign.advertId}...`);
          
          const response = await fetch(`https://advert-api.wildberries.ru/adv/v2/fullstats?id=${campaign.advertId}&from=${startDate}&to=${endDate}`, {
            method: 'GET',
            headers: {
              'Authorization': apiKey,
              'Content-Type': 'application/json'
            }
          });

          if (response.ok) {
            const data: FullStatsResponse[] = await response.json();
            console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∫–∞–º–ø–∞–Ω–∏–∏ ${campaign.advertId}:`, data.length > 0 ? '–µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ' : '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö');
            
            if (data && data.length > 0) {
              const campaignStats = data[0]; // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å
              const allArticles = new Set<string>(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º Set –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞—Ä—Ç–∏–∫—É–ª–æ–≤
              
              // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ nmId –∏–∑ –≤—Å–µ—Ö –¥–Ω–µ–π –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
              campaignStats.days?.forEach(day => {
                day.apps?.forEach(app => {
                  app.nm?.forEach(nm => {
                    if (nm.nmId) {
                      const articleInfo = nm.name ? `${nm.nmId}:${nm.name}` : `${nm.nmId}`;
                      allArticles.add(articleInfo);
                    }
                  });
                });
              });
              
              if (allArticles.size > 0) {
                const articlesList = Array.from(allArticles).join(', ');
                articlesMap.set(campaign.advertId, articlesList);
                console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ ${allArticles.size} –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –¥–ª—è –∫–∞–º–ø–∞–Ω–∏–∏ ${campaign.advertId}`);
              } else {
                articlesMap.set(campaign.advertId, `${campaign.name || '–ö–∞–º–ø–∞–Ω–∏—è'} ID:${campaign.advertId} (–Ω–µ—Ç –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ)`);
              }
            } else {
              articlesMap.set(campaign.advertId, `${campaign.name || '–ö–∞–º–ø–∞–Ω–∏—è'} ID:${campaign.advertId} (–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ fullstats)`);
            }
          } else {
            console.warn(`‚ö†Ô∏è API fullstats –¥–ª—è –∫–∞–º–ø–∞–Ω–∏–∏ ${campaign.advertId} –≤–µ—Ä–Ω—É–ª ${response.status}`);
            articlesMap.set(campaign.advertId, `${campaign.name || '–ö–∞–º–ø–∞–Ω–∏—è'} ID:${campaign.advertId} (API Error:${response.status})`);
          }
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ fullstats –¥–ª—è –∫–∞–º–ø–∞–Ω–∏–∏ ${campaign.advertId}:`, error);
          articlesMap.set(campaign.advertId, `${campaign.name || '–ö–∞–º–ø–∞–Ω–∏—è'} ID:${campaign.advertId} (–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞)`);
        }
      });
      
      await Promise.all(promises);
      console.log(`üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${Math.min(i + batchSize, campaigns.length)} –∏–∑ ${campaigns.length} –∫–∞–º–ø–∞–Ω–∏–π`);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏ –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ API
      if (i + batchSize < campaigns.length) {
        await new Promise(resolve => setTimeout(resolve, 1000));
      }
    }
    
    console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ –ø–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è ${articlesMap.size} –∫–∞–º–ø–∞–Ω–∏–π`);
    return articlesMap;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    
    // –í —Å–ª—É—á–∞–µ –ø–æ–ª–Ω–æ–π –æ—à–∏–±–∫–∏ —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏
    campaigns.forEach(campaign => {
      articlesMap.set(campaign.advertId, `${campaign.name || '–ö–∞–º–ø–∞–Ω–∏—è'} ID:${campaign.advertId} (–û—à–∏–±–∫–∞ API)`);
    });
    
    return articlesMap;
  }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ —Å—á–µ—Ç–∞ (–Ω–æ–≤–∞—è)
export async function fetchAccountBalance(apiKey: string): Promise<{balance: number, net: number, bonus: number} | null> {
  try {
    console.log('üí∞ –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —Å—á–µ—Ç–∞...');
    
    const response = await fetch('https://advert-api.wildberries.ru/adv/v1/balance', {
      method: 'GET',
      headers: {
        'Authorization': apiKey,
        'Content-Type': 'application/json'
      }
    });

    if (response.ok) {
      const data = await response.json();
      console.log(`‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–µ–Ω: —Å—á–µ—Ç ${data.balance}, –±–∞–ª–∞–Ω—Å ${data.net}, –±–æ–Ω—É—Å—ã ${data.bonus}`);
      return data;
    } else {
      console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å: ${response.status}`);
      return null;
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞:', error);
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ –∞—Ä—Ç–∏–∫—É–ª–∞–º –∫–∞–º–ø–∞–Ω–∏–π (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
export async function fetchCampaignArticles(apiKey: string, campaigns: Campaign[]): Promise<Map<number, string>> {
  const articlesMap = new Map<number, string>();
  
  try {
    console.log(`üìä –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –¥–ª—è ${campaigns.length} –∫–∞–º–ø–∞–Ω–∏–π...`);
    
    // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ API –±—é–¥–∂–µ—Ç–∞ (–º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é)
    const batchSize = 5; // –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
    for (let i = 0; i < campaigns.length; i += batchSize) {
      const batch = campaigns.slice(i, i + batchSize);
      const promises = batch.map(async (campaign) => {
        try {
          // –ü—Ä–æ–±—É–µ–º API –±—é–¥–∂–µ—Ç–∞ –∫–∞–º–ø–∞–Ω–∏–∏ (–±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π)
          const response = await fetch(`https://advert-api.wildberries.ru/adv/v1/budget?id=${campaign.advertId}`, {
            method: 'GET',
            headers: {
              'Authorization': apiKey,
              'Content-Type': 'application/json'
            }
          });

          if (response.ok) {
            const budgetData = await response.json();
            // –ï—Å—Ç—å –±—é–¥–∂–µ—Ç - –∑–Ω–∞—á–∏—Ç –∫–∞–º–ø–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–∞
            const budgetInfo = `–ë—é–¥–∂–µ—Ç: ${budgetData.total || 0} —Ä—É–±.`;
            articlesMap.set(campaign.advertId, `${campaign.name || campaign.advertId} (${budgetInfo})`);
          } else {
            // API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            articlesMap.set(campaign.advertId, `${campaign.name || '–ö–∞–º–ø–∞–Ω–∏—è'} ID:${campaign.advertId}`);
          }
        } catch {
          // –ü—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–º–ø–∞–Ω–∏–∏
          articlesMap.set(campaign.advertId, `${campaign.name || '–ö–∞–º–ø–∞–Ω–∏—è'} ID:${campaign.advertId}`);
        }
      });
      
      await Promise.all(promises);
      console.log(`üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${Math.min(i + batchSize, campaigns.length)} –∏–∑ ${campaigns.length} –∫–∞–º–ø–∞–Ω–∏–π`);
    }
    
    console.log(`‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–π –¥–ª—è ${articlesMap.size} –∫–∞–º–ø–∞–Ω–∏–π`);
    return articlesMap;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π:', error);
    
    // –í —Å–ª—É—á–∞–µ –ø–æ–ª–Ω–æ–π –æ—à–∏–±–∫–∏ —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏
    campaigns.forEach(campaign => {
      articlesMap.set(campaign.advertId, `${campaign.name || '–ö–∞–º–ø–∞–Ω–∏—è'} ID:${campaign.advertId}`);
    });
    
    return articlesMap;
  }
}



// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å –ª–æ–≥–∏–∫–æ–π –±—É—Ñ–µ—Ä–Ω—ã—Ö –¥–Ω–µ–π
export async function fetchFinancialData(apiKey: string, startDate: string, endDate: string): Promise<FinancialData[]> {
  try {
    console.log(`üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: ${startDate} - ${endDate}`);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –±—É—Ñ–µ—Ä–Ω—ã–µ –¥–Ω–∏
    const originalStart = new Date(startDate);
    const originalEnd = new Date(endDate);
    const bufferStart = addDays(originalStart, -1);
    const bufferEnd = addDays(originalEnd, 1);
    
    const adjustedStartDate = formatDate(bufferStart);
    const adjustedEndDate = formatDate(bufferEnd);
    
    console.log(`üìÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ —Å –±—É—Ñ–µ—Ä–Ω—ã–º–∏ –¥–Ω—è–º–∏: ${adjustedStartDate} - ${adjustedEndDate}`);
    
    const response = await fetch(`https://advert-api.wildberries.ru/adv/v1/upd?from=${adjustedStartDate}&to=${adjustedEndDate}`, {
      method: 'GET',
      headers: {
        'Authorization': apiKey,
        'Content-Type': 'application/json'
      }
    });

    if (!response.ok) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: ${response.status} ${response.statusText}`);
      return [];
    }

    const data = await response.json() as WildberriesFinanceRecord[];
    console.log(`üì¶ –ü–æ–ª—É—á–µ–Ω–æ ${Array.isArray(data) ? data.length : 0} —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π`);
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    const financialData: FinancialData[] = data.map((record: WildberriesFinanceRecord) => ({
      advertId: record.advertId,
      date: record.updTime ? new Date(record.updTime).toISOString().split('T')[0] : '',
      sum: record.updSum || 0,
      bill: record.paymentType === '–°—á–µ—Ç' ? 1 : 0,
      type: record.type || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
      docNumber: record.updNum || '',
      sku: `Type:${record.advertType || 0} Status:${record.advertStatus || 0}`, // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø –∏ —Å—Ç–∞—Ç—É—Å –∫–∞–∫ SKU
      campName: record.campName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞–º–ø–∞–Ω–∏—è' // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏
    }));

    console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${financialData.length} —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π`);
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –ª–æ–≥–∏–∫—É –±—É—Ñ–µ—Ä–Ω—ã—Ö –¥–Ω–µ–π
    const filteredData = applyBufferDayLogic(financialData, originalStart, originalEnd);
    console.log(`üìä –ü–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ª–æ–≥–∏–∫–∏ –±—É—Ñ–µ—Ä–Ω—ã—Ö –¥–Ω–µ–π: ${filteredData.length} –∑–∞–ø–∏—Å–µ–π`);
    
    return filteredData;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
    return [];
  }
}

// –õ–æ–≥–∏–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –±—É—Ñ–µ—Ä–Ω—ã—Ö –¥–Ω–µ–π
export function applyBufferDayLogic(data: FinancialData[], originalStart: Date, originalEnd: Date): FinancialData[] {
  const originalStartStr = formatDate(originalStart);
  const originalEndStr = formatDate(originalEnd);
  const bufferStartStr = formatDate(addDays(originalStart, -1));
  const bufferEndStr = formatDate(addDays(originalEnd, 1));
  
  console.log(`üìä –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –±—É—Ñ–µ—Ä–Ω—ã—Ö –¥–Ω–µ–π:`);
  console.log(`   –û—Å–Ω–æ–≤–Ω–æ–π –ø–µ—Ä–∏–æ–¥: ${originalStartStr} - ${originalEndStr}`);
  console.log(`   –ë—É—Ñ–µ—Ä–Ω—ã–µ –¥–Ω–∏: ${bufferStartStr} (–ø—Ä–µ–¥—ã–¥—É—â–∏–π), ${bufferEndStr} (—Å–ª–µ–¥—É—é—â–∏–π)`);
  
  // –†–∞–∑–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º
  const mainPeriodData = data.filter(record => 
    record.date >= originalStartStr && record.date <= originalEndStr
  );
  
  const previousBufferData = data.filter(record => record.date === bufferStartStr);
  const nextBufferData = data.filter(record => record.date === bufferEndStr);
  
  console.log(`   –û—Å–Ω–æ–≤–Ω–æ–π –ø–µ—Ä–∏–æ–¥: ${mainPeriodData.length} –∑–∞–ø–∏—Å–µ–π`);
  console.log(`   –ü—Ä–µ–¥—ã–¥—É—â–∏–π –±—É—Ñ–µ—Ä–Ω—ã–π –¥–µ–Ω—å: ${previousBufferData.length} –∑–∞–ø–∏—Å–µ–π`);
  console.log(`   –°–ª–µ–¥—É—é—â–∏–π –±—É—Ñ–µ—Ä–Ω—ã–π –¥–µ–Ω—å: ${nextBufferData.length} –∑–∞–ø–∏—Å–µ–π`);
  
  // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
  const mainDocNumbers = new Set(mainPeriodData.map(record => record.docNumber));
  console.log(`   –ù–æ–º–µ—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞: ${Array.from(mainDocNumbers).join(', ')}`);
  
  // –ò—Å–∫–ª—é—á–∞–µ–º –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –∑–∞–ø–∏—Å–∏ —Å –Ω–æ–º–µ—Ä–∞–º–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–∑ —Å–ª–µ–¥—É—é—â–µ–≥–æ –±—É—Ñ–µ—Ä–Ω–æ–≥–æ –¥–Ω—è
  const nextBufferDocNumbers = new Set(nextBufferData.map(record => record.docNumber));
  const filteredMainData = mainPeriodData.filter(record => !nextBufferDocNumbers.has(record.docNumber));
  
  if (nextBufferDocNumbers.size > 0) {
    console.log(`   –ò—Å–∫–ª—é—á–∞–µ–º –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –∑–∞–ø–∏—Å–∏ —Å –Ω–æ–º–µ—Ä–∞–º–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: ${Array.from(nextBufferDocNumbers).join(', ')}`);
    console.log(`   –ò—Å–∫–ª—é—á–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${mainPeriodData.length - filteredMainData.length}`);
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –±—É—Ñ–µ—Ä–Ω–æ–≥–æ –¥–Ω—è, –µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ –Ω–æ–º–µ—Ä–∞–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
  const previousBufferToAdd = previousBufferData.filter(record => 
    mainDocNumbers.has(record.docNumber) && previousBufferData.filter(r => r.docNumber === record.docNumber).length >= 2
  );
  
  if (previousBufferToAdd.length > 0) {
    console.log(`   –î–æ–±–∞–≤–ª—è–µ–º –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –±—É—Ñ–µ—Ä–Ω–æ–≥–æ –¥–Ω—è: ${previousBufferToAdd.length} –∑–∞–ø–∏—Å–µ–π`);
  }
  
  const result = [...filteredMainData, ...previousBufferToAdd];
  console.log(`   –ò—Ç–æ–≥–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: ${result.length}`);
  
  return result;
} 